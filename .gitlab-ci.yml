---
include:
  - project: econ/it/docker
    file: .gitlab/docker.yml
  - project: econ/it/docker
    file: .gitlab/tasks.yml

.assets:
  stage: assets
  image: node:16
  artifacts:
    paths: [public/]
  variables:
    - ECON_PACKAGE_REGISTRY_READ_TOKEN: ${ECON_PACKAGE_REGISTRY_READ_TOKEN}
  script:
    - yarn install
    - yarn build

.deploy:
  stage: deploy
  dependencies: []
  script:
    - !reference [.docker-registry-login-read, script]
    - !reference [.docker-stack-deploy, script]

.verify:
  stage: verify
  dependencies: []
  script:
    - !reference [.docker-stack-verify-running, script]
    - !reference [.docker-stack-verify-web, script]

.staging:
  tags: [docker]
  environment:
    name: staging
    url: https://pool-root.econ.uzh.ch/staging/
  variables:
    DATABASE_URL: ${ECON_POOL_DATABASE_URL_STAGING}
    IP_ALLOWLIST: "${ECON_IP_ECON_ALL},${ECON_IP_UZH_VPN}"
    PREFIX_PATH: /staging
    PUBLIC_URL: https://pool-root.econ.uzh.ch
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success

.production:
  tags: [docker]
  environment:
    name: production
    url: https://pool-root.econ.uzh.ch/
  variables:
    DATABASE_URL: ${ECON_POOL_DATABASE_URL}
    PUBLIC_URL: https://pool-root.econ.uzh.ch
  rules:
    - if: $CI_COMMIT_TAG

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

variables:
  DOCKER_FOLDER: docker
  DOCKER_STACK_NAME: pool
  DOCKER_SERVICE_NAME: app
  EXPECTED_STATUS_CODE: 302
  SIHL_SECRET: ${ECON_POOL_SIHL_SECRET}
  SMTP_HOST: smtp.uzh.ch
  SMTP_PASSWORD: ${ECON_SMTP_APP_PASSWORD}
  SMTP_PORT: 587
  SMTP_SECURE: "false"
  SMTP_SENDER: it@econ.uzh.ch
  SMTP_START_TLS: "true"
  SMTP_USERNAME: ecserv
  VERSION: ${CI_COMMIT_TAG} # set to "latest" in docker tasks by default
  # all needed for exception notifier
  CI_JOB_TOKEN: ${ECON_CI_JOB_TOKEN}
  CI_API_V4_URL: ${ECON_CI_API_V4_URL}
  CI_PROJECT_ID: ${ECON_CI_PROJECT_ID}
  CI_PROJECT_NAME: ${ECON_CI_PROJECT_NAME}

stages:
  - test
  - assets
  - build
  - deploy
  - verify
  - execute

before_script:
  - |
    if [[ -z $ECON_SMTP_APP_PASSWORD || -z $ECON_POOL_DATABASE_URL || -z $ECON_POOL_DATABASE_URL_STAGING || -z $ECON_POOL_SIHL_SECRET ]]; then
      echo 'one or more global variables are undefined'
      exit 1
    fi

compile-and-test:
  stage: test
  image: ocaml/opam:debian-ocaml-4.12
  services:
    - name: "mariadb:10.6"
      alias: database-root
    - name: "mariadb:10.6"
      alias: database-tenant
  variables:
    SIHL_ENV: test
    MYSQL_DATABASE: test_econ
    MYSQL_ROOT_PASSWORD: password
    DATABASE_URL: mariadb://root:${MYSQL_ROOT_PASSWORD}@database-root:3306/${MYSQL_DATABASE}
  artifacts:
    paths:
      - _build/default/pool/run/run.exe
      - _build/default/pool/test/
  script:
    # update defalt opam repository (find latest package versions)
    - opam remote remove --all default
    - opam remote add default https://opam.ocaml.org

    # pin sihl to quickly receive updates without having to wait for opam community repo
    - opam pin add -yn sihl https://github.com/oxidizing/sihl.git
    - opam pin add -yn sihl-cache https://github.com/oxidizing/sihl.git
    - opam pin add -yn sihl-email https://github.com/oxidizing/sihl.git
    - opam pin add -yn sihl-queue https://github.com/oxidizing/sihl.git
    - opam pin add -yn sihl-storage https://github.com/oxidizing/sihl.git
    - opam pin add -yn sihl-token https://github.com/oxidizing/sihl.git
    - opam pin add -yn sihl-user https://github.com/oxidizing/sihl.git

    # pin custom libraries hosted on the UZH gitlab
    - opam pin add -yn canary https://github.com/chrismamo1/canary.git
    - opam pin add -yn conformist https://github.com/oxidizing/conformist.git

    # pin payout and install system dependencies
    - opam pin add -yn pool .
    - OPAMSOLVERTIMEOUT=180 opam depext -y pool

    # install dependencies - same as `make deps` but without dev and JS
    - opam install --deps-only --with-test -y .

    # compile project - same as `make build` but without JS
    - opam exec -- dune build --root .
    # migrate test database
    - opam config exec -- dune exec --root . pool/run/run.exe migrate.root
    - opam config exec -- dune exec --root . pool/run/run.exe seed.root.clean
    - opam config exec -- dune exec --root . pool/run/run.exe migrate.tenant
    - opam config exec -- dune exec --root . pool/run/run.exe seed.tenant.clean

    # run tests
    - opam config exec -- make test

assets-staging:
  extends:
    - .assets
    - .staging

assets-production:
  extends:
    - .assets
    - .production

build:
  stage: build
  tags: [docker]
  script:
    - !reference [.docker-registry-login-write, script]
    - !reference [.docker-build, script]
    - !reference [.docker-push-to-registry, script]

deploy-staging:
  extends:
    - .deploy
    - .staging
  needs: [build]
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - when: manual

deploy-production:
  extends:
    - .deploy
    - .production
  needs: [build]

verify-staging:
  extends:
    - .verify
    - .staging
  needs: [deploy-staging]
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

verify-production:
  extends:
    - .verify
    - .production
  needs: [deploy-production]
